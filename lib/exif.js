import fs from"fs";import{tmpdir}from"os";import Crypto from"crypto";import ff from"fluent-ffmpeg";import webp from"node-webpmux";import path from"path";async function imageToWebp(media){const tmpFileOut=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`),tmpFileIn=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.jpg`);fs.writeFileSync(tmpFileIn,media),await new Promise(((resolve,reject)=>{ff(tmpFileIn).on("error",reject).on("end",(()=>resolve(!0))).addOutputOptions(["-vcodec","libwebp","-vf","scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse"]).toFormat("webp").save(tmpFileOut)}));const buff=fs.readFileSync(tmpFileOut);return fs.unlinkSync(tmpFileOut),fs.unlinkSync(tmpFileIn),buff}async function videoToWebp(media){const tmpFileOut=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`),tmpFileIn=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.mp4`);fs.writeFileSync(tmpFileIn,media),await new Promise(((resolve,reject)=>{ff(tmpFileIn).on("error",reject).on("end",(()=>resolve(!0))).addOutputOptions(["-vcodec","libwebp","-vf","scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse","-loop","0","-ss","00:00:00","-t","00:00:05","-preset","default","-an","-vsync","0"]).toFormat("webp").save(tmpFileOut)}));const buff=fs.readFileSync(tmpFileOut);return fs.unlinkSync(tmpFileOut),fs.unlinkSync(tmpFileIn),buff}async function writeExifImg(media,metadata){let wMedia=await imageToWebp(media);const tmpFileIn=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`),tmpFileOut=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`);if(fs.writeFileSync(tmpFileIn,wMedia),metadata.packname||metadata.author){const img=new webp.Image,json={"sticker-pack-id":"https://github.com/DikaArdnt/Hisoka-Morou","sticker-pack-name":metadata.packname,"sticker-pack-publisher":metadata.author,emojis:metadata.categories?metadata.categories:[""]},exifAttr=Buffer.from([73,73,42,0,8,0,0,0,1,0,65,87,7,0,0,0,0,0,22,0,0,0]),jsonBuff=Buffer.from(JSON.stringify(json),"utf-8"),exif=Buffer.concat([exifAttr,jsonBuff]);return exif.writeUIntLE(jsonBuff.length,14,4),await img.load(tmpFileIn),fs.unlinkSync(tmpFileIn),img.exif=exif,await img.save(tmpFileOut),tmpFileOut}}async function writeExifVid(media,metadata){let wMedia=await videoToWebp(media);const tmpFileIn=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`),tmpFileOut=path.join(tmpdir(),`${Crypto.randomBytes(6).readUIntLE(0,6).toString(36)}.webp`);if(fs.writeFileSync(tmpFileIn,wMedia),metadata.packname||metadata.author){const img=new webp.Image,json={"sticker-pack-id":"https://dikode-team.com","sticker-pack-name":metadata.packname,"sticker-pack-publisher":metadata.author,emojis:metadata.categories?metadata.categories:[""]},exifAttr=Buffer.from([73,73,42,0,8,0,0,0,1,0,65,87,7,0,0,0,0,0,22,0,0,0]),jsonBuff=Buffer.from(JSON.stringify(json),"utf-8"),exif=Buffer.concat([exifAttr,jsonBuff]);return exif.writeUIntLE(jsonBuff.length,14,4),await img.load(tmpFileIn),fs.unlinkSync(tmpFileIn),img.exif=exif,await img.save(tmpFileOut),tmpFileOut}}export default{imageToWebp:imageToWebp,videoToWebp:videoToWebp,writeExifImg:writeExifImg,writeExifVid:writeExifVid};